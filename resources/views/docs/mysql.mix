<h1>MySQL</h1>
<p>The MySQL database package is one of the optional packages that is available for the horsepower server. It allows you to connect to the database and make queries against it by selecting, updating, deleting and inserting items. The package comes with many great features that allow you to write queries using built in methods aka the query builder. The package also contains Models so you can modify your table by using a model.</p>
<h2>Configuration</h2>
<p>The database is configured using the config file <code>config/db.js</code>. Within that file you can setup your database connection information.</p>
<p>The export has a named item, it can be whatever you would like. So we added one called <code>mysql</code>, and setup the database settings for that driver within that object.</p>
<p class="warn">You can have multiple <b>default</b> items in this config but they must be for different drivers. That means that each driver type may only have one <b>default</b>. If there is more than one default for a driver, then an error will be thrown.</p>
<pre><code class="language-javascript">const { env } = require('@horsepower/server')

module.exports = {
  mysql: {
    default: true,
    driver: 'mysql',
    database: env('DB_DATABASE', ''),
    username: env('DB_USERNAME', ''),
    password: env('DB_PASSWORD', ''),
    hostname: env('DB_HOSTNAME', 'localhost')
  }
}</code></pre>
<p>The <code>mysql</code> object has <code>default: true</code> which means that when we don't call <code>connect()</code> it will use this default <code>mysql driver</code> like this:</p>

<pre><code class="language-javascript">// This will use the default driver
DB.table('my_table')</code></pre>
<p>If we want to use a driver that isn't the default we can do it like so:</p>

<pre><code class="language-javascript">DB.connect('mysql2').table('my_table')
DB.connect('mysql2', 'my_table')</code></pre>


<h2>Query Builder</h2>
<p>The query builder is a tool that allows you to build queries by chaining methods together. When the queries run, they are escaped automatically as to avoid sql injection.</p>
<h3>Select all</h3>
<p>Here is a basic query that selects all users from the table <code>users</code></p>

<pre><code class="language-javascript">let result = await DB.table('users').get()</code></pre>
<p>The resulting query string will look like this:</p>
<pre><code class="language-sql">SELECT * FROM users;</code></pre>

<h3>Select one</h3>
<p>We can select one item using <code>first()</code> this will get the first item in the result set it will also add a limit to the query for optimization.</p>

<pre><code class="language-javascript">let result = await DB.table('users').first()</code></pre>
<p>The resulting query string will look like this:</p>
<pre><code class="language-sql">SELECT * FROM users LIMIT 1 OFFSET 0;</code></pre>

<h3>Filtering results</h3>
<p>There are multiple types of <code>where</code> methods and they are used to add filters to a where statement. These methods can be strung together to form one where clause.</p>
<p>Here is a list of where items that can be used to build a mysql query:</p>
<ul>
  <li>where</li>
  <li>whereIn</li>
  <li>whereNotIn</li>
  <li>whereBetween</li>
  <li>whereNotBetween</li>
  <li>whereNull</li>
  <li>whereNotNull</li>
  <li>whereMatchAgainst</li>
</ul>

<p class="warn">In the following queries, the actual queries will be escaped for query safety. You do not need to worry about escaping these values before making the query as it is done automatically.</p>
<h4>where</h4>
<pre><code class="language-javascript">// This performs an equality search on the table
await DB.table('users').where('username', 'Billy').first()

// This performs a greater than search on the table
await DB.table('users').where('age', '>', 10).get()</code></pre>

<pre><code class="language-sql">-- The query for the equality search
SELECT * FROM `users` WHERE `username` = 'Billy' LIMIT 1 OFFSET 0;

-- The query for the greater than search
SELECT * FROM `users` WHERE `age` > 10;
</code></pre>

<h4>whereIn</h4>
<pre><code class="language-javascript">await DB.table('users').whereIn('username', ['Billy', 'Bob', 'Joe']).get()</code></pre>
<pre><code class="language-sql">SELECT * FROM `users` WHERE `username` IN('Billy', 'Bob', 'Joe');</code></pre>

<h4>whereNotIn</h4>
<pre><code class="language-javascript">await DB.table('users').whereNotIn('username', ['Billy', 'Bob', 'Joe']).get()</code></pre>
<pre><code class="language-sql">SELECT * FROM `users` WHERE `username` NOT IN('Billy', 'Bob', 'Joe');</code></pre>

<h4>whereBetween</h4>
<pre><code class="language-javascript">await DB.table('users').whereBetween('age', 10, 20).get()</code></pre>
<pre><code class="language-sql">SELECT * FROM `users` WHERE `age` BETWEEN 10 AND 20;</code></pre>

<h4>whereNotBetween</h4>
<pre><code class="language-javascript">await DB.table('users').whereNotBetween('age', 10, 20).get()</code></pre>
<pre><code class="language-sql">SELECT * FROM `users` WHERE `age` NOT BETWEEN 10 AND 20;</code></pre>

<h4>whereNull</h4>
<pre><code class="language-javascript">await DB.table('users').whereNull('gender').get()</code></pre>
<pre><code class="language-sql">SELECT * FROM `users` WHERE `gender` IS NULL;</code></pre>

<h4>whereNotNull</h4>
<pre><code class="language-javascript">await DB.table('users').whereNotNull('gender').get()</code></pre>
<pre><code class="language-sql">SELECT * FROM `users` WHERE `gender` IS NOT NULL;</code></pre>

<h4>whereMatchAgainst</h4>
<pre><code class="language-javascript">await DB.table('search').whereMatchAgainst(['title', 'document'], 'red roses').get()
await DB.table('search').whereMatchAgainst(['title', 'document'], 'red roses', 'boolean').get()</code></pre>
<pre><code class="language-sql">SELECT * FROM users WHERE MATCH ('title', 'document') AGAINST ('red roses');
SELECT * FROM users WHERE MATCH ('title', 'document') AGAINST ('red roses' IN BOOLEAN MODE);</code></pre>